* 3 урок
** Расширение сущности
  создаём новую сущность, в экстендс выбираем от чего
  (как особенность - не можем по умлчанию без дополнительных плясок с бубном полностью заменить стандартного системного пользователя на расширенного. без галки - всё хорошо отрабатывает)
  добавляем поля
  генерим скрипты БД
  создаём расширение экрана (от юзер-брауз)
  создали просто браузер экрана
** Расширение приложения
  В приложении-родителе создаём из приложения пакет для локального репозитория AppComponentDescriptor
  Install App Component
  Создаём новое приложение (та же версия платформы)
  в свойствах указываем приложение родитель, чей функционал хотим добавить в новое
*** Особенность
  когда работаем с экраном наследником - в хмл - копируем дсКонтекст родителя, пишем всё, что касается наследника с отношением к дс с именем родителя, и в контроллере - обращаемся к датасорсу-родителю

* 4 урок
** Коротко о полнотекстовом поиске
  при включении появляется вкладка Other в студии
  если ставим галку "инклуд..." то в подтягивает сущности, включённые в ФТС родительского приложения
  добавляем/исключаем сущности и поля которые будем отслеживать
  fts - admin - jmx - enable - reindexAll - processQueue
** Группы доступа
  Администрирование - Access Group
  чтобы ограничить сущность - выбираем сущность и в поле where пишем {E} (это будет означать алиас для сущности которую ограничиваем) .createdBy = :session$userLogin
  В целом - это будет усложнение запросов к базе
** Настройка внешнего вида
  Создаём тему (на базе существующей)
  добавляем изображения-значки, создаём стили
  можно менять как общую тему, так и отображение каждого отдельного компонента
  у всех компонентов есть файл scss
  https://demo.vaadin.com/valo-theme/#!common
шестерёнка в списке файлов -> autoscroll from source
** Диаграмы
  Работает через AmCharts (можно взять любой)
  Через интерфейс DataProvider
  в XML указываем chart и прикладываем к нему Datasource
** Карты
  Для сущности которая привязана к карте указываем два дабл поля - долготу и широту
  Можно рисовать полигоны и ломаные линии
** Сводные таблицы
  Поддерживает ручное перетаскивание
** Создание отчётов
  - шаблон (хтмл, док, хл)
  - данные для отчёта (собираем данные из базы)
  можно генерить кодом в специальном пакете
  на основе YARG
  сам отчёт включает в себя полосы и датасеты, и накладывается на шаблон
  можно параметризировать, включать вложенные датасорсы

** Module Atmosphere (чат относительно сущности с уведомлениями и плюшками)

* 5 урок
** Для изменения стандартного сообщения об исключении - код исключения переопределяем в web->src->messages.properties
** Заполнить таблицу сущностями с помощью скриптов в два файла:
  core->db->init->30
  core->db->update->yymmdd-hhmm-scriptName.sql
  берём системную информацию сущности, скрипт-для-инсерт, подменяем айдишник (в постгресе в таблицах)

логи студии находятся в User->Name->.haulmont->studio
чтобы ограничить длину числового поля - в редакторе сущности у поля в аннотацию добавляем длину @Column(name = "PROD_YEAR", length = 4)
при формировании имени в мета проперти лучше не обращаться к полю, а getInstanceName()

6f -> доделать